# Why React?
1. SPA (Single Page Application)을 만들기 위해 사용
    - 새로고침 없이 앱 처럼 부드럽게 만들기 위해
    - Vue, Svelte 등등
2. React 쓰면 HTML 재사용이 용이하다.
3. React Native를 사용하여 같은 문법으로 앱 개발 가능

# basic knowledge
1. HTML
2. CSS
3. JavaScript
- 리액트는 자바스크립트 웹개발을 도와주는 도구일 뿐이기 때문에 기본 지식이 필요하다.

# Setting
1. Node.js install
2. VSCode install
3. Create directory(folder)
    - Open Terminal
    - Create Project: npx create-react-app 'project-name'

# view
1. Terminal: npm start

# Directory
1. node_modules: 라이브러리 코드 보관함
2. public: static 파일 보관함
3. src: 작성된 코드 보관함
    - 메인 페이지 코드 작성은 App.js에서 작성한다.
    - App.js → (index.js) → index.html
4. package.json: 프로젝트 정보


# React basic 1 (JSX)
1. React는 .html이 아니라 .jsx 파일에서 작성한다.
2. JSX : js에서 작성된 코드를 html로 변경시켜 준다.
3. 기본 문법
    - class → className
    - 변수 사용 (데이터 바인딩): const title = "Title"; <h4>{ title }</h4>
        - 데이터 바인딩: 서버에서 받은 데이터를 HTM에 사용
    - style 사용: style={ { display : 'block', fontSize: '16px' } }
(참고)
- Error message : 터미널 or 브라우저에서 확인 가능


# React basic 2 (state)
1. return() 안에는 병렬로 2개 이상의 태그 기입 금지
2. 자료 저장
    - 중요한 자료 저장 시 변수를 사용 → state 문법 사용
    - let ['변수명', 'set변수명'] = useState("Hello")
        - 변수명에 state에 저장한 값("Hello") 사용 가능
        - set변수명은 state 변경 함수
## State를 사용하는 이유
1. 변수를 사용한 HTML은 자동으로 재렌더링 되지 않는다.
2. state에 쓰던 HTML은 자동으로 재렌더링 된다.
- 변동 시 자동으로 HTML에 반영되게 만들고 싶을 경우 state 사용
- 자주 변경될거 같은 HTML 부분에 사용
- 동적인 데이터를 받아 HTML에 적용할 때 사용

Destructuring 문법 : 
    - Array 안에 있는 자료를 각각 변수로 뺴주는 문법
    let num = [1, 2];
    let a = num[0];
    let b = num[1];
    → let [a, b] = [1, 2];


# React basic 3 (Set state)
1. onClick 이벤트 사용
    1. 정의 된 함수 사용
        - function 함수(){ 함수내용 }
        - onClick={ '함수' }
    2. 온클릭 내 함수 정의
        - onClick={()=>{  }}
2. state 변경 함수 사용
    1. let [변수, set변수] = useState(0);
    2. onClick={()=>{ set변수(1) }}
        - 변수가 0에서 1로 변경 된다.


# React basic 4 (Set state Array,Object)
1. array, object를 다룰 때 원본 데이터를 보존하는 것이 좋다.
2. 예시 :
    let [array, setArray] = [1, 2, 3, 4, 5];
    <Button onClick={()=>{
        let copy = [...array];
        // copy[변경할 index] = '변경할 값';
        copy[0] = 2;
        setArray(copy);
        // array 결과 값 : [2, 2, 3, 4, 5];
    }}> arrayUpdate</Button>
3. state 변경 함수 동작원리
    - state 변경함수를 사용할 때 (기존state === 신규state)를 먼저 검사한다.
    - 기존과 신규가 같으면 state를 업데이트하지 않는다.
4. array/object 동작원리
    - 자바스크립트는 array/object 자료를 만들면 RAM에 저장된다.
    - 만들어진 자료는 RAM에 저장된 자료를 가리키는 화살표만 담겨있다.
        예시 : let array = [1, 2, 3]
        * array는 RAM에 저장된 [1, 2, 3]의 array데이터를 직접 가지는 것이 아닌 
        * 가리키는 화살표만 담기게 된다.
    - array/object 자료를 복사하면 같은 값을 각각 가지고 있는 것이 아니고 같은 데이터를 가리키는 화살표이기 때문에 원본 데이터를 바꾸면 복사된 데이터도 바뀌게 된다.
        * let data1 = [1, 2, 3];
        * let data2 = data1;
5. Shallow copy, Deep copy [...array]
    - spread operator
    - array/object 자료형 왼쪽에 붙일 수 있으며, 괄호를 제거하는 문법이다.
    예시 :
        * let data1 = [1, 2, 3];
        * let data2 = [...data1];
        * data1 != data2
        - data1에 있는 자료의 관호를 벗긴 후 다시 array로 만들었을 경우 화살표가 달라진다.
        - 화살표가 다른 독립적인 array 복사본을 생성할 수 있다.


# React basic 5 (Component)
1. fragment 문법 : <> ..HTML 태그.. </>
2. Component : HTML을 한 단어로 치환해서 사용할 수 있는 문법 (HTML 덩어리)
    - function을 이용하여 함수를 만들고 return(<div></div>) 작성
    - Component를 적용할 곳에 <함수명></함수명> 또는 <함수명 /> 이런식으로 적용한다.
3. 주의점
    - component 작명 시 첫글자를 대문자로 작명한다. (<Modal />)
    - return() 안에 HTML 태그들이 평행하게 여러개 들어갈 수 없다.
    - function App(){} 내부에서 만들지 않는다.
        - function App(){} 자체가 컴포넌트 생성 문법이다.
    - component 안에 component를 만들지 않는다
    - <Compnent></Component> 또는 <Component /> 이런식으로 적용한다.
4. Arrow function
    - function 함수명(){}
    - const 함수명 = () => {}
5. When Component
    - 사이트에 반복해서 출현하는 HTML 덩어리
    - 내용이 매우 자주 변경될 것 같은 HTML 덩어리
    - 다른 페이지를 만들고 싶다면 그 페이지의 HTML 내용을 하나의 덩어리로 만든다.
    - 다른 팀원과 협업할 때 웹페이지를 Component 단위로 나워서 작업을 분배한다.

6. 단점
    - HTML을 깔끔하게 만드려고 Component를 너무 많이 만들면 관리하기가 힘들다.